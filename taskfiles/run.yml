version: "3"

vars:
  SCHEMA_ORG: org.hcl
  SCHEMA_PROFILE: profile.hcl
  SCHEMA_LICENSE: license.hcl

tasks:
  all:
    desc: "Starts everything"
    deps:
      - task: worker
      - task: starter
      - task: service-license
      - task: service-org
      - task: service-profile
      #- task: tailcall

  tailcall:
    desc: "Starts Tailcall GraphQL server"
    cmds:
      - pkgx killport 8000
      - |
        pkgx tailcall@latest start \
          ./tailcall/server.graphql \
          ./tailcall/org.graphql \
          ./tailcall/profile.graphql \
          ./tailcall/license.graphql \
          ./tailcall/temporal.graphql

  infra:
    run: once
    desc: "Runs Docker Compose infra"
    cmds:
      - docker compose stop
      - docker compose up -d
      - task: migrate

  worker:
    run: once
    deps:
      - task: infra
    desc: "Runs Temporal worker"
    cmd: go run cmd/saga/worker/main.go
    env:
      PORT_API_LICENSE: "{{ .PORT_API_LICENSE }}"
      PORT_API_ORG: "{{ .PORT_API_ORG }}"
      PORT_API_PROFILE: "{{ .PORT_API_PROFILE }}"

  starter:
    run: once
    deps:
      - task: infra
    desc: "Runs Temporal workflow starter service"
    cmds:
      - pkgx killport 8081
      - go run cmd/saga/start/main.go
    env:
      GRPC_CONNECT_PORT: 8081

  int-run-service:
    internal: true
    deps:
      - task: infra
    cmds:
      - "pkgx killport {{ .PORT_API }}"
      - "go run cmd/svc/{{ .NAME }}/main.go"
    env:
      GRPC_CONNECT_PORT: "{{ .PORT_API }}"
      DB_CONN_STRING: "postgres://postgres:postgrespassword@localhost:{{ .PORT_DB }}/postgres?sslmode=disable"

  service-license:
    run: once
    desc: "Runs license service"
    cmds:
      - task: int-run-service
        vars:
          PORT_API: "{{ .PORT_API_LICENSE }}"
          PORT_DB: "{{ .PORT_DB_LICENSE }}"
          NAME: license

  service-org:
    run: once
    desc: "Runs org service"
    cmds:
      - task: int-run-service
        vars:
          PORT_API: "{{ .PORT_API_ORG }}"
          PORT_DB: "{{ .PORT_DB_ORG }}"
          NAME: org

  service-profile:
    run: once
    desc: "Runs profile service"
    cmds:
      - task: int-run-service
        vars:
          PORT_API: "{{ .PORT_API_PROFILE }}"
          PORT_DB: "{{ .PORT_DB_PROFILE }}"
          NAME: profile

  inspect:
    desc: "Inspect"
    cmds:
      - task: int-inspect
        vars:
          PORT: "{{ .PORT_DB_ORG }}"
      - task: int-inspect
        vars:
          PORT: "{{ .PORT_DB_PROFILE }}"
      - task: int-inspect
        vars:
          PORT: "{{ .PORT_DB_LICENSE }}"

  int-inspect:
    internal: true
    cmd: |
      pkgx +atlasgo.io atlas \
        schema inspect \
        -u "postgres://postgres:postgrespassword@localhost:{{ .PORT }}/postgres?sslmode=disable" \
        --schema public

  migrate:
    desc: "Applies database migrations"
    cmds:
      - task: int-migrate
        vars:
          PORT: "{{ .PORT_DB_ORG }}"
          SCHEMA_FILE: "{{ .SCHEMA_ORG }}"
      - task: int-migrate
        vars:
          PORT: "{{ .PORT_DB_PROFILE }}"
          SCHEMA_FILE: "{{ .SCHEMA_PROFILE }}"
      - task: int-migrate
        vars:
          PORT: "{{ .PORT_DB_LICENSE }}"
          SCHEMA_FILE: "{{ .SCHEMA_LICENSE }}"

  int-migrate:
    internal: true
    env:
      PGHOST: localhost
      PGPORT: "{{ .PORT }}"
      PGUSER: postgres
      PGPASSWORD: postgrespassword
      PGDATABASE: postgres
    cmds:
      # Wait for Postgres to start. Yes, we need this...
      - "pkgx eb -x 20 -- lsof -i :{{ .PORT }}"
      # Wait for Postgres to get ready. Yes, we need this as well...
      - |
        pkgx eb -x 20 -- pkgx pg_isready && [[ "$?" -eq 0 ]]
      - |
        pkgx +atlasgo.io atlas \
          schema apply \
          -u "postgres://postgres:postgrespassword@localhost:{{ .PORT }}/postgres?sslmode=disable" \
          --to file://db/schema/{{ .SCHEMA_FILE }} \
          --schema public \
          --auto-approve
