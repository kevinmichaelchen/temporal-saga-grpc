// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: temporal/v1beta1/api.proto

package temporalv1beta1connect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	v1beta1 "github.com/kevinmichaelchen/temporal-saga-grpc/internal/idl/temporal/v1beta1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// TemporalServiceName is the fully-qualified name of the TemporalService service.
	TemporalServiceName = "temporal.v1beta1.TemporalService"
)

// TemporalServiceClient is a client for the temporal.v1beta1.TemporalService service.
type TemporalServiceClient interface {
	// CreateLicense starts a Temporal Workflow that will:
	// 1. Create an Org
	// 2. Create a Profile
	// 3. Create a License
	CreateLicense(context.Context, *connect_go.Request[v1beta1.CreateLicenseRequest]) (*connect_go.Response[v1beta1.CreateLicenseResponse], error)
}

// NewTemporalServiceClient constructs a client for the temporal.v1beta1.TemporalService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewTemporalServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) TemporalServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &temporalServiceClient{
		createLicense: connect_go.NewClient[v1beta1.CreateLicenseRequest, v1beta1.CreateLicenseResponse](
			httpClient,
			baseURL+"/temporal.v1beta1.TemporalService/CreateLicense",
			opts...,
		),
	}
}

// temporalServiceClient implements TemporalServiceClient.
type temporalServiceClient struct {
	createLicense *connect_go.Client[v1beta1.CreateLicenseRequest, v1beta1.CreateLicenseResponse]
}

// CreateLicense calls temporal.v1beta1.TemporalService.CreateLicense.
func (c *temporalServiceClient) CreateLicense(ctx context.Context, req *connect_go.Request[v1beta1.CreateLicenseRequest]) (*connect_go.Response[v1beta1.CreateLicenseResponse], error) {
	return c.createLicense.CallUnary(ctx, req)
}

// TemporalServiceHandler is an implementation of the temporal.v1beta1.TemporalService service.
type TemporalServiceHandler interface {
	// CreateLicense starts a Temporal Workflow that will:
	// 1. Create an Org
	// 2. Create a Profile
	// 3. Create a License
	CreateLicense(context.Context, *connect_go.Request[v1beta1.CreateLicenseRequest]) (*connect_go.Response[v1beta1.CreateLicenseResponse], error)
}

// NewTemporalServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewTemporalServiceHandler(svc TemporalServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle("/temporal.v1beta1.TemporalService/CreateLicense", connect_go.NewUnaryHandler(
		"/temporal.v1beta1.TemporalService/CreateLicense",
		svc.CreateLicense,
		opts...,
	))
	return "/temporal.v1beta1.TemporalService/", mux
}

// UnimplementedTemporalServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedTemporalServiceHandler struct{}

func (UnimplementedTemporalServiceHandler) CreateLicense(context.Context, *connect_go.Request[v1beta1.CreateLicenseRequest]) (*connect_go.Response[v1beta1.CreateLicenseResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("temporal.v1beta1.TemporalService.CreateLicense is not implemented"))
}
