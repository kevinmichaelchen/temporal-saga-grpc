// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: profile/v1beta1/api.proto

package profilev1beta1connect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	v1beta1 "github.com/kevinmichaelchen/temporal-saga-grpc/internal/idl/profile/v1beta1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// ProfileServiceName is the fully-qualified name of the ProfileService service.
	ProfileServiceName = "profile.v1beta1.ProfileService"
)

// ProfileServiceClient is a client for the profile.v1beta1.ProfileService service.
type ProfileServiceClient interface {
	CreateProfile(context.Context, *connect_go.Request[v1beta1.CreateProfileRequest]) (*connect_go.Response[v1beta1.CreateProfileResponse], error)
}

// NewProfileServiceClient constructs a client for the profile.v1beta1.ProfileService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewProfileServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) ProfileServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &profileServiceClient{
		createProfile: connect_go.NewClient[v1beta1.CreateProfileRequest, v1beta1.CreateProfileResponse](
			httpClient,
			baseURL+"/profile.v1beta1.ProfileService/CreateProfile",
			opts...,
		),
	}
}

// profileServiceClient implements ProfileServiceClient.
type profileServiceClient struct {
	createProfile *connect_go.Client[v1beta1.CreateProfileRequest, v1beta1.CreateProfileResponse]
}

// CreateProfile calls profile.v1beta1.ProfileService.CreateProfile.
func (c *profileServiceClient) CreateProfile(ctx context.Context, req *connect_go.Request[v1beta1.CreateProfileRequest]) (*connect_go.Response[v1beta1.CreateProfileResponse], error) {
	return c.createProfile.CallUnary(ctx, req)
}

// ProfileServiceHandler is an implementation of the profile.v1beta1.ProfileService service.
type ProfileServiceHandler interface {
	CreateProfile(context.Context, *connect_go.Request[v1beta1.CreateProfileRequest]) (*connect_go.Response[v1beta1.CreateProfileResponse], error)
}

// NewProfileServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewProfileServiceHandler(svc ProfileServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle("/profile.v1beta1.ProfileService/CreateProfile", connect_go.NewUnaryHandler(
		"/profile.v1beta1.ProfileService/CreateProfile",
		svc.CreateProfile,
		opts...,
	))
	return "/profile.v1beta1.ProfileService/", mux
}

// UnimplementedProfileServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedProfileServiceHandler struct{}

func (UnimplementedProfileServiceHandler) CreateProfile(context.Context, *connect_go.Request[v1beta1.CreateProfileRequest]) (*connect_go.Response[v1beta1.CreateProfileResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("profile.v1beta1.ProfileService.CreateProfile is not implemented"))
}
