syntax = "proto3";

package temporal.v1beta1;

import "buf/validate/validate.proto";
import "google/protobuf/timestamp.proto";

service TemporalService {
  // CreateOnboardingWorkflow starts a Temporal Workflow that will:
  // 1. Create an Org
  // 2. Create a Profile
  // 3. Create a License
  rpc CreateOnboardingWorkflow(CreateOnboardingWorkflowRequest) returns (CreateOnboardingWorkflowResponse) {}
}

message WorkflowOptions {
  // ID - The business identifier of the workflow execution.
  // Optional: defaulted to a uuid.
  string workflow_id = 1 [(buf.validate.field).string.uuid = true];
}

message CreateOnboardingWorkflowRequest {
  WorkflowOptions workflow_options = 1;
  License license = 2;
  Org org = 3;
  Profile profile = 4;
}

message CreateOnboardingWorkflowResponse {}

message License {
  google.protobuf.Timestamp start = 1;
  google.protobuf.Timestamp end = 2;

  option (buf.validate.message).cel = {
    id: "transaction.expiration_date",
    message: "end time must be after start time",
    expression: "this.end > this.start"
  };
}

message Org {
  string name = 1 [(buf.validate.field).string.min_len = 1];
}

message Profile {
  string name = 1 [(buf.validate.field).string.min_len = 1];
}
